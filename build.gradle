plugins {
    alias libs.plugins.managedversioning
    alias libs.plugins.nexuspublish
    id 'jacoco-report-aggregation'
    id 'test-report-aggregation'
    id 'java-library'
    id 'opensesame.publishing'
}

java.withJavadocJar()
java.withSourcesJar()

managedVersioning {
    versionFile.set rootProject.file('version.properties')
    versionPRs()
    versionSnapshots()

    gitHubActions {
        release {
            prettyName = 'Release'
            workflowDispatch = true
            gradleJob {
                name = 'build'
                step {
                    setupGitUser()
                }
                readOnly = false
                gradlew 'Tag Release', 'tagRelease'
                gradlew 'Build', 'build'
                step {
                    run = 'git push && git push --tags'
                }
                step {
                    name.set 'Submit Dependencies'
                    uses.set 'mikepenz/gradle-dependency-submission@v0.9.0'
                    with.put('gradle-build-module', [
                            ':opensesame-core',
                            ':opensesame-compile',
                            ':opensesame-groovy',
                            ':opensesame-javac',
                            ':opensesame-fabric',
                            ':opensesame-plugin-core',
                            ':opensesame-plugin-loom'
                    ].join('\n'))
                    with.put('gradle-build-configuration', 'compileClasspath')
                    with.put('sub-module-mode', 'COMBINED')
                    with.put('include-build-environment', 'true')
                }
                recordVersion 'Record Version', 'version'
            }
            gradleJob {
                name.set 'publishCentral'
                buildCache()
                needs.add('build')
                gradlew 'Publish', 'publishCentral', 'closeAndReleaseSonatypeStagingRepository'
                tag.set('${{needs.build.outputs.version}}')
                sign()
                mavenCentral()
            }
            gradleJob {
                name.set 'publishPlugins'
                buildCache()
                needs.add('build')
                gradlew 'Publish Plugins', 'publishPlugins'
                tag.set('${{needs.build.outputs.version}}')
                sign()
                pluginPortal()
            }
        }

        snapshot {
            prettyName.set 'Snapshot'
            workflowDispatch.set(true)
            onBranches.add 'main'
            gradleJob {
                buildCache()
                name.set 'build'
                gradlew 'Assemble', 'assemble'
                gradlew 'Test', 'check', '--continue'
                step {
                    name.set 'Test Plugin'
                    id.set 'test_plugin'
                    env.putAll gradleEnv
                    run.set './gradlew check --continue'
                    workingDirectory.set './testplugin'
                    runsOnError.set true
                    requiredSteps.add 'assemble'
                }
                step {
                    name.set 'Upload Test Report'
                    uses.set 'actions/upload-artifact@v4'
                    runsOnError.set true
                    requiredSteps.add 'assemble'
                    with.put('name', 'junit-test-results')
                    with.put('path', '**/build/test-results/*/TEST-*.xml')
                    with.put('retention-days', '1')
                }
                step {
                    name.set 'Upload Coverage Report'
                    uses.set 'actions/upload-artifact@v4'
                    runsOnError.set true
                    requiredSteps.add 'assemble'
                    with.put('name', 'jacoco-coverage')
                    with.put('path', 'build/reports/jacoco/testCodeCoverageReport')
                }
                gradlew 'Publish', 'publish'
                mavenSnapshot('github')
            }
        }
        build_pr {
            prettyName.set 'Build PR'
            pullRequest.set(true)
            gradleJob {
                name.set 'build'
                gradlew 'Assemble', 'assemble'
                gradlew 'Test', 'check', '--continue'
                step {
                    name.set 'Test Plugin'
                    id.set 'test_plugin'
                    env.putAll gradleEnv
                    run.set './gradlew check --continue'
                    workingDirectory.set './testplugin'
                    runsOnError.set true
                    requiredSteps.add 'assemble'
                }
                step {
                    name.set 'Upload Test Report'
                    uses.set 'actions/upload-artifact@v4'
                    runsOnError.set true
                    requiredSteps.add 'assemble'
                    with.put('name', 'junit-test-results')
                    with.put('path', '**/build/test-results/*/TEST-*.xml')
                    with.put('retention-days', '1')
                }
                step {
                    name.set 'Upload Coverage Report'
                    uses.set 'actions/upload-artifact@v4'
                    runsOnError.set true
                    requiredSteps.add 'assemble'
                    with.put('name', 'jacoco-coverage')
                    with.put('path', 'build/reports/jacoco/testCodeCoverageReport')
                }
                gradlew 'Publish', 'publish'
                pullRequestArtifact()
            }
        }
        publish_pr {
            prettyName.set 'Publish PR'
            publishPullRequestAction(
                    'github',
                    "dev/lukebemish/opensesame/opensesame-*",
                    'Build PR'
            )
        }
        report {
            prettyName.set 'Report Test Results'
            completedWorkflows.set(['Build PR', 'Snapshot'])
            job {
                name.set 'checks'
                permissions.put('contents', 'read')
                permissions.put('actions', 'read')
                permissions.put('checks', 'write')
                step {
                    name.set 'Checkout'
                    uses.set 'actions/checkout@v4'
                    with.put 'ref', '${{ github.event.workflow_run.head_commit.id }}'
                    with.put 'repository', '${{ github.event.workflow_run.head_repository.full_name }}'
                }
                step {
                    name.set 'Download Test Report'
                    uses.set 'actions/download-artifact@v4'
                    with.put 'name', 'junit-test-results'
                    with.put 'github-token', '${{ github.token }}'
                    with.put 'run-id', '${{ github.event.workflow_run.id }}'
                }
                step {
                    name.set 'JUnit Test Report - Java 17'
                    uses.set 'dorny/test-reporter@v1'
                    with.put 'name', 'Test Results - Java 17'
                    with.put 'path', '**/test-results/testOn17/**/TEST-*.xml'
                    with.put 'reporter', 'java-junit'
                    with.put 'fail-on-empty', 'true'
                    with.put 'list-tests', 'failed'
                }
                step {
                    name.set 'JUnit Test Report - Java 21'
                    uses.set 'dorny/test-reporter@v1'
                    with.put 'name', 'Test Results - Java 21'
                    with.put 'path', '**/test-results/testOn21/**/TEST-*.xml'
                    with.put 'reporter', 'java-junit'
                    with.put 'fail-on-empty', 'true'
                    with.put 'list-tests', 'failed'
                }
                step {
                    name.set 'JUnit Test Report - Misc'
                    uses.set 'dorny/test-reporter@v1'
                    with.put 'name', 'Test Results - Misc'
                    with.put 'path', '**/test-results/test/**/TEST-*.xml'
                    with.put 'reporter', 'java-junit'
                    with.put 'fail-on-empty', 'true'
                    with.put 'list-tests', 'failed'
                }
            }
        }
    }
}

managedVersioning.apply()

repositories {
    mavenCentral()
    maven {
        name = 'FabricMC'
        url = 'https://maven.fabricmc.net/'
    }
    maven {
        name = 'SpongePowered'
        url = 'https://repo.spongepowered.org/maven'
    }
}

configurations {
    javadocSources {
        canBeResolved = true
    }
    javadocImplementation {
        canBeResolved = false
        canBeConsumed = false
    }
    compileOnlyApi.extendsFrom javadocImplementation
    javadocClasspath {
        canBeResolved = true
        extendsFrom javadocImplementation
    }
}

dependencies {
    subprojects.each { p ->
        if (p.name.startsWith('opensesame-')) {
            jacocoAggregation p
            testReportAggregation p
        }
    }

    [
            'mixin',
            'core',
            'groovy'
    ].each { p ->
        javadocSources project(path: ":opensesame-$p", configuration: 'sourcesElements')
        javadocImplementation project(path: ":opensesame-$p", configuration: 'apiElements')
    }

    javadocClasspath libs.jetbrains.annotations
    javadocClasspath libs.groovy.core
}

println "Building: ${rootProject.version}"

if (!System.getenv('PR_NUMBER') && !System.getenv('SNAPSHOT_MAVEN_URL')) {
    nexusPublishing {
        repositories {
            sonatype {
                username.set(System.getenv('SONATYPE_USER') ?: '')
                password.set(System.getenv('SONATYPE_PASSWORD') ?: '')
                nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            }
        }

    }
}

reporting {
    reports {
        testCodeCoverageReport(JacocoCoverageReport) {
            testType = TestSuiteType.UNIT_TEST
            reportTask.configure {
                reports.xml.required = true
            }
        }
        testAggregateTestReport(AggregateTestReport) {
            testType = TestSuiteType.UNIT_TEST
        }
    }
}

tasks.register('unpackJavadocSources') {
    dependsOn configurations.javadocSources
    inputs.files(configurations.javadocSources)
    def destinationDir = layout.buildDirectory.dir('unpackedJavadocSources').get().asFile
    outputs.dir(destinationDir)
    doLast {
        destinationDir.deleteDir()
        copy {
            into destinationDir
            configurations.javadocSources.files.each {
                from(zipTree(it)) {
                    include('**/*.java')
                    exclude('module-info.java')
                }
            }
        }

        destinationDir.traverse {
            if (it.isDirectory()) {
                def packageInfo = it.toPath().resolve('package-info.java').toFile()
                if (packageInfo.exists()) {
                    String packageInfoContent = packageInfo.text
                    if (packageInfoContent.contains('@ApiStatus.Internal')) {
                        it.listFiles().each {
                            if (it.isFile()) {
                                it.delete()
                            }
                        }
                    }
                }
            }
        }
    }
}

tasks.named('javadoc', Javadoc).configure {
    dependsOn tasks.unpackJavadocSources
    dependsOn configurations.javadocClasspath
    inputs.files(configurations.javadocClasspath)
    inputs.files(tasks.unpackJavadocSources.outputs.files)
    destinationDir = layout.buildDirectory.dir('javadoc').get().asFile
    classpath = configurations.javadocClasspath
    source(tasks.unpackJavadocSources.outputs.files)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                openSesameConvention.pomShared(it, '')
                description = 'A tool for breaking encapsulation in JVM projects'
            }
        }
    }
}

tasks.named('check').configure {
    dependsOn tasks.testCodeCoverageReport
    dependsOn tasks.testAggregateTestReport
}