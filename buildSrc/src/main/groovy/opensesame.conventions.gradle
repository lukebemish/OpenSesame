plugins {
    id 'java-library'
    id 'signing'
    id 'maven-publish'
}

repositories {
    mavenCentral()
}

configurations {
    testModuleClasspath {
        canBeResolved = true
    }
}

dependencies {
    compileOnly libs.jetbrains.annotations
    compileOnly(annotationProcessor(libs.autoservice))

    testImplementation libs.junit.api
    testRuntimeOnly libs.junit.engine

    testImplementation project(':testtargets')
    testModuleClasspath project(':testtargets')
}

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
        events = ['passed', 'failed', 'skipped']
    }

    testClassesDirs += files(
            configurations.testModuleClasspath
    )

    outputs.upToDateWhen {false}
}

processResources {
    from rootProject.file('LICENSE')
}

jar {
    manifest {
        attributes([
                'Specification-Version'   : rootProject.version,
                'Implementation-Commit-Time': managedVersioning.timestamp.get(),
                'Implementation-Commit': managedVersioning.hash.get(),
                'Automatic-Module-Name'   : "dev.lukebemish.opensesame.${project.name.replace("opensesame-", "")}".toString()
        ])
    }
}

if (System.getenv('PR_NUMBER')) {
    publishing {
        repositories {
            maven {
                name = 'LocalMaven'
                url = rootProject.layout.buildDirectory.dir('repo')
            }
        }
    }
} else if (System.getenv('SNAPSHOT_MAVEN_URL')) {
    publishing {
        repositories {
            maven {
                name = 'PersonalMaven'
                url = uri(System.getenv('SNAPSHOT_MAVEN_URL'))
                credentials {
                    username = System.getenv('MAVEN_USER')
                    password = System.getenv('MAVEN_PASSWORD')
                }
            }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

if (System.getenv('IS_RELEASE') || System.getenv('SNAPSHOT_MAVEN_URL')) {
    signing {
        final signingKey = System.getenv('SIGNING_KEY') ?: ''
        final signingPassword = System.getenv('SIGNING_PASSWORD') ?: ''
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.mavenJava
    }
}