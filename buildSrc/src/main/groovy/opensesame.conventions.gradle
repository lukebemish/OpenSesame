plugins {
    id 'java-library'
    id 'signing'
    id 'maven-publish'
    id 'jacoco'
}

java.toolchain.languageVersion.set JavaLanguageVersion.of(17)

group = rootProject.group
version = rootProject.version

repositories {
    mavenCentral()
}

configurations {
    testModuleClasspath {
        canBeResolved = true
    }
}

dependencies {
    compileOnly libs.jetbrains.annotations
    annotationProcessor(libs.autoservice)
    compileOnly(libs.autoservice)

    testImplementation libs.junit.api
    testRuntimeOnly libs.junit.engine

    testImplementation project(':testtargets')
    testModuleClasspath project(':testtargets')
}

testing {
    suites.create('testOn21', JvmTestSuite) {
        targets.configureEach {
            testTask.configure {
                javaLauncher = javaToolchains.launcherFor {
                    languageVersion = JavaLanguageVersion.of(21)
                }
            }
        }
    }

    suites.create('testOn17', JvmTestSuite) {
        targets.configureEach {
            testTask.configure {
                javaLauncher = javaToolchains.launcherFor {
                    languageVersion = JavaLanguageVersion.of(17)
                }
            }
        }
    }

    suites.configureEach {
        if (it.name == 'test') {
            return
        }

        dependencies {
            implementation sourceSets.test.output
        }

        targets.configureEach {
            testTask.configure {
                useJUnitPlatform()

                testLogging {
                    showStandardStreams = true
                    exceptionFormat = 'full'
                    events = ['passed', 'failed', 'skipped']
                }

                testClassesDirs += files(
                        sourceSets.test.output,
                        configurations.testModuleClasspath
                )

                outputs.upToDateWhen {false}

                jacoco {
                    excludes += 'dev/lukebemish/opensesame/test/target/*'
                }
            }
        }
    }
}

configurations {
    testOn17RuntimeClasspath.extendsFrom testRuntimeClasspath
    testOn21RuntimeClasspath.extendsFrom testRuntimeClasspath

    testResultsElementsForTest.extendsFrom testResultsElementsForTestOn17
    testResultsElementsForTest.extendsFrom testResultsElementsForTestOn21
}

tasks.named('check') {
    dependsOn(testing.suites.testOn21)
    dependsOn(testing.suites.testOn17)
}

processResources {
    from rootProject.file('LICENSE')
}

jar {
    manifest {
        attributes([
                'Specification-Version'   : rootProject.version,
                'Implementation-Commit-Time': managedVersioning.timestamp.get(),
                'Implementation-Commit': managedVersioning.hash.get(),
                'Automatic-Module-Name'   : "dev.lukebemish.opensesame.${project.name.replace("opensesame-", "")}".toString(),
                'FMLModType': 'LIBRARY'
        ])
    }
}

if (System.getenv('PR_NUMBER')) {
    publishing {
        repositories {
            maven {
                name = 'LocalMaven'
                url = rootProject.layout.buildDirectory.dir('repo')
            }
        }
    }
} else if (System.getenv('SNAPSHOT_MAVEN_URL')) {
    publishing {
        repositories {
            maven {
                name = 'PersonalMaven'
                url = uri(System.getenv('SNAPSHOT_MAVEN_URL'))
                credentials {
                    username = System.getenv('MAVEN_USER')
                    password = System.getenv('MAVEN_PASSWORD')
                }
            }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

if (System.getenv('IS_RELEASE')) {
    signing {
        final signingKey = System.getenv('SIGNING_KEY') ?: ''
        final signingPassword = System.getenv('SIGNING_PASSWORD') ?: ''
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.mavenJava
    }
}

class OpenSesameConventionExtension {
    def pomShared(MavenPom it, String name) {
        it.name = "OpenSesame - $name".toString()
        it.packaging = 'jar'
        it.url = 'https://github.com/lukebemish/OpenSesame'
        it.inceptionYear = '2023'

        it.licenses {
            license {
                name = '3-Clause BSD License'
                url = 'https://opensource.org/license/bsd-3-clause/'
            }
        }
        it.developers {
            developer {
                id = 'lukebemish'
                name = 'Luke Bemish'
                email = 'lukebemish@lukebemish.dev'
                url = 'https://github.com/lukebemish/'
            }
        }
        it.scm {
            connection='scm:git:git://github.com/lukebemish/OpenSesame.git'
            developerConnection='scm:git:ssh://github.com/lukebemish/OpenSesame.git'
            url='https://github.com/lukebemish/OpenSesame'
        }
    }
}

project.extensions.add('openSesameConvention', OpenSesameConventionExtension)