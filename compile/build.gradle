plugins {
    id 'opensesame.conventions'
}

java.withSourcesJar()
java.withJavadocJar()

sourceSets {
    asm {}
}

java.registerFeature('asm') {
    usingSourceSet(sourceSets.asm)
    withSourcesJar()
    withJavadocJar()
}

configurations {
    testSource {
        canBeResolved = true
    }
}

dependencies {
    api project(':opensesame-core')
    asmImplementation libs.asm.core
    asmImplementation project
    asmCompileOnly libs.jetbrains.annotations

    testImplementation libs.asm.core

    testSource project(path: ':testtargets', configuration: 'testSource')
}

def tempClassesDir = layout.buildDirectory.dir("tempClasses/compileJava")

tasks.named('compileTestJava', JavaCompile).configure {
    dependsOn(configurations.testSource)
    source(configurations.testSource)
    destinationDirectory.set(tempClassesDir)
}

var asmCompileTest = tasks.register('processTestClasses', JavaExec) {
    dependsOn compileTestJava
    dependsOn configurations.asmRuntimeClasspath
    inputs.dir(tempClassesDir)
    inputs.files(sourceSets.asm.runtimeClasspath)
    outputs.dir(sourceSets.test.output.classesDirs)
    classpath = sourceSets.asm.runtimeClasspath
    mainClass.set 'dev.lukebemish.opensesame.compile.asm.VisitingOpenProcessor'
    args = compileTestJava.outputs.files.files.collectMany { [tempClassesDir.get().asFile.canonicalPath, sourceSets.test.output.classesDirs.singleFile.canonicalPath] }

    jacoco.applyTo(it)
    extensions.configure(JacocoTaskExtension) {
        it.excludes += 'dev/lukebemish/opensesame/test/target/*'
    }
    outputs.upToDateWhen { false }

    finalizedBy tasks.named('testAsmCompileCodeCoverateReport')
}

var report = tasks.register('testAsmCompileCodeCoverateReport', JacocoReport) {
    dependsOn asmCompileTest.get()
    executionData asmCompileTest.get()
    sourceSets sourceSets.main
}

artifacts {
    add('coverageDataElementsForTest', report.get().executionData.singleFile) {
        builtBy report.get()
    }
}

tasks.testClasses.dependsOn processTestClasses

processAsmResources {
    from(rootProject.file('LICENSE')) {
        into 'META-INF'
    }
}

asmJar {
    manifest {
        attributes([
                'Specification-Version'   : rootProject.version,
                'Implementation-Commit-Time': managedVersioning.timestamp.get(),
                'Implementation-Commit': managedVersioning.hash.get(),
                'Automatic-Module-Name'   : 'dev.lukebemish.opensesame.compile.asm',
                'FMLModType': 'LIBRARY'
        ])
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                openSesameConvention.pomShared(it, 'Compile')
                description = 'Compile-time abstractions for OpenSesame, a tool for typesafe access to normally inacessible members'
            }
        }
    }
}
