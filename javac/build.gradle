plugins {
    id 'opensesame.conventions'
}

java.withSourcesJar()
java.withJavadocJar()

configurations {
    testSource {
        canBeResolved = true
    }
    asmRuntimeClasspath {
        canBeResolved = true
    }
}

dependencies {
    implementation project(':opensesame-compile')
    implementation(project(':opensesame-compile')) {
        capabilities {
            requireCapability 'dev.lukebemish.opensesame:opensesame-compile-asm'
        }
    }
    api project(':opensesame-core')
    implementation libs.asm.core

    testSource project(path: ':testtargets', configuration: 'testSource')
    asmRuntimeClasspath project(path: ':opensesame-compile', configuration: 'asmRuntimeElements')
}

// bootstrapping! The javac plugin can use OpenSesame itself via this
def tempClassesDir = layout.buildDirectory.dir("tempClasses/compileJava")
var asmCompileTest = tasks.register('processMainClasses', JavaExec) {
    dependsOn compileJava
    dependsOn configurations.asmRuntimeClasspath
    inputs.dir(tempClassesDir)
    inputs.files(configurations.asmRuntimeClasspath)
    outputs.dir(sourceSets.main.output.classesDirs)
    doFirst {
        sourceSets.main.output.classesDirs.singleFile.deleteDir()
    }
    classpath = configurations.asmRuntimeClasspath
    mainClass.set 'dev.lukebemish.opensesame.compile.asm.VisitingProcessor'
    args = [tempClassesDir.get().asFile.canonicalPath, sourceSets.main.output.classesDirs.singleFile.canonicalPath]
}

tasks.named('compileJava', JavaCompile).configure {
    destinationDirectory.set(tempClassesDir)
}

tasks.named('classes').configure {
    dependsOn asmCompileTest
}

tasks.named('compileTestJava', JavaCompile).configure {
    dependsOn(configurations.testSource)
    source(configurations.testSource)
    options.compilerArgs.add '-Xplugin:OpenSesame'
    dependsOn(tasks.compileJava)
    inputs.files(sourceSets.main.output.classesDirs)
    inputs.files(sourceSets.main.runtimeClasspath)
}

def testCompileOn(int v) {
    var singleTest = tasks.register('testCompileOn'+v, JavaExec) {
        javaLauncher.set javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(v)
        }

        dependsOn configurations.testRuntimeClasspath
        dependsOn sourceSets.test.java.sourceDirectories
        dependsOn configurations.testSource

        var dirProvider = layout.buildDirectory.dir('testClasses/'+v)

        outputs.dir(dirProvider)
        inputs.files(sourceSets.test.java.sourceDirectories)
        inputs.files(configurations.testSource)

        group = "Verification"
        description = "Compile test sources with java"
        classpath = sourceSets.main.runtimeClasspath
        mainClass.set 'com.sun.tools.javac.Main'
        argumentProviders.add(
                new CommandLineArgumentProvider() {
                    @Override
                    List<String> asArguments() {
                        return [
                                '-cp', configurations.testCompileClasspath.asPath,
                                '-d', dirProvider.get().asFile.path,
                                '-Xplugin:OpenSesame'
                        ] +
                                (sourceSets.test.java.srcDirs.collectMany { fileTree(it.path).files.collect { it.path } }) +
                                (configurations.testSource.files.collectMany { fileTree(it.path).files.collect { it.path } })
                    }
                }
        )

        jacoco.applyTo(it)
        extensions.configure(JacocoTaskExtension) {
            it.excludes += 'dev/lukebemish/opensesame/test/target/*'
        }
        outputs.upToDateWhen { false }

        finalizedBy tasks.named('testCompileOn'+v+'CodeCoverateReport')
    }

    var report = tasks.register('testCompileOn'+v+'CodeCoverateReport', JacocoReport) {
        dependsOn singleTest.get()
        executionData singleTest.get()
        sourceSets sourceSets.main
    }

    artifacts {
        add('coverageDataElementsForTest', report.get().executionData.singleFile) {
            builtBy report.get()
        }
    }

    tasks.named('check').configure {
        dependsOn singleTest
    }
}

testCompileOn(17)
testCompileOn(21)

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                openSesameConvention.pomShared(it, 'Javac Compiler Plugin')
                description = 'javac compiler plugin for OpenSesame, a tool for typesafe access to normally inacessible members'
            }
        }
    }
}
